
// src/RegisterForm.js
import React, { useEffect, useMemo, useRef, useState } from "react";
import {
  Form,
  Button,
  Row,
  Col,
  Card,
  Modal,
  Alert,
  Badge,
  InputGroup,
} from "react-bootstrap";

// IMPORTANT: In src/index.jsx add:
// import 'bootstrap/dist/css/bootstrap.min.css';

const COUNTRIES = [
  "India",
  "Bangladesh",
  "Sri Lanka",
  "Indonesia",
  "Philippines",
  "Kenya",
  "Tanzania",
  "Nigeria",
  "Vietnam",
  "Malaysia",
  "Mexico",
  "Brazil",
  "USA",
  "UK",
  "Australia",
  "Other",
];

const ORGANIZATION_TYPES = [
  "NGO",
  "Government",
  "Company",
  "Community Cooperative",
  "Academic/Research Institution",
  "Other",
];

const ECOSYSTEM_OPTIONS = [
  "Mangrove",
  "Seagrass",
  "Salt marsh",
  "Coastal mudflat",
  "Coastal sediment",
  "Other",
];

const EMAIL_REGEX = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
const PHONE_REGEX = /^\+?[0-9\-() ]{7,20}$/;
const WALLET_REGEX = /^0x[a-fA-F0-9]{40}$/;

const MAX_LOCAL_PHOTO_MB = 10;
const MAX_ORG_PHOTO_MB = 15;
const MAX_DOC_MB = 20;
const MAX_BOUNDARY_MB = 20;

// Debounced effect helper
const useDebouncedEffect = (effect, deps, delay = 600) => {
  const cleanupRef = useRef(null);
  useEffect(() => {
    const t = setTimeout(() => {
      if (cleanupRef.current) cleanupRef.current();
      const maybeCleanup = effect();
      if (typeof maybeCleanup === "function") cleanupRef.current = maybeCleanup;
    }, delay);
    return () => clearTimeout(t);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
};

// Hold-to-show tooltip
const HoldTip = ({ text }) => {
  const [show, setShow] = useState(false);
  return (
    <span className="hold-tip-wrapper">
      <span
        className="hold-tip-trigger"
        onMouseDown={() => setShow(true)}
        onMouseUp={() => setShow(false)}
        onMouseLeave={() => setShow(false)}
        role="button"
        aria-label="Hold for help"
      >
        (?)
      </span>
      {show && <span className="hold-tip-bubble">{text}</span>}
    </span>
  );
};

// Map picker via Leaflet CDN (no extra NPM)
const MapPickerModal = ({
  show,
  onHide,
  onApply,
  initialLat,
  initialLng,
  title = "Pick Location on Map",
}) => {
  const mapContainerRef = useRef(null);
  const mapRef = useRef(null);
  const markerRef = useRef(null);
  const [leafletLoaded, setLeafletLoaded] = useState(false);
  const [tempLat, setTempLat] = useState(
    typeof initialLat === "number" ? initialLat : 20.5937
  );
  const [tempLng, setTempLng] = useState(
    typeof initialLng === "number" ? initialLng : 78.9629
  );

  const ensureLeafletLoaded = () =>
    new Promise((resolve, reject) => {
      if (window.L && window.L.map) {
        resolve();
        return;
      }
      if (!document.getElementById("leaflet-css")) {
        const link = document.createElement("link");
        link.id = "leaflet-css";
        link.rel = "stylesheet";
        link.href = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.css";
        document.head.appendChild(link);
      }
      if (!document.getElementById("leaflet-js")) {
        const script = document.createElement("script");
        script.id = "leaflet-js";
        script.src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";
        script.async = true;
        script.onload = resolve;
        script.onerror = reject;
        document.body.appendChild(script);
      } else {
        resolve();
      }
    });

  useEffect(() => {
    if (!show) return;
    let mounted = true;
    ensureLeafletLoaded()
      .then(() => {
        if (!mounted) return;
        setLeafletLoaded(true);
        setTimeout(() => {
          if (!mapContainerRef.current || !window.L) return;
          mapRef.current = window.L.map(mapContainerRef.current, {
            center: [
              typeof initialLat === "number" ? initialLat : 20.5937,
              typeof initialLng === "number" ? initialLng : 78.9629,
            ],
            zoom: typeof initialLat === "number" ? 13 : 5,
          });
          window.L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution: "Â© OpenStreetMap contributors",
            maxZoom: 19,
          }).addTo(mapRef.current);

          if (typeof initialLat === "number" && typeof initialLng === "number") {
            markerRef.current = window.L.marker([initialLat, initialLng]).addTo(
              mapRef.current
            );
          }

          mapRef.current.on("click", (e) => {
            const { lat, lng } = e.latlng;
            setTempLat(lat);
            setTempLng(lng);
            if (!markerRef.current) {
              markerRef.current = window.L.marker([lat, lng]).addTo(mapRef.current);
            } else {
              markerRef.current.setLatLng([lat, lng]);
            }
          });
        }, 0);
      })
      .catch(() => setLeafletLoaded(false));

    return () => {
      mounted = false;
      if (mapRef.current) {
        mapRef.current.off();
        mapRef.current.remove();
        mapRef.current = null;
      }
      markerRef.current = null;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [show]);

  const useDeviceGPS = () => {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const lat = pos.coords.latitude;
        const lng = pos.coords.longitude;
        setTempLat(lat);
        setTempLng(lng);
        if (mapRef.current && window.L) {
          mapRef.current.setView([lat, lng], 15);
          if (!markerRef.current) {
            markerRef.current = window.L.marker([lat, lng]).addTo(mapRef.current);
          } else {
            markerRef.current.setLatLng([lat, lng]);
          }
        }
      },
      () => {},
      { enableHighAccuracy: true, timeout: 8000 }
    );
  };

  return (
    <Modal show={show} onHide={onHide} size="lg" centered>
      <Modal.Header closeButton className="bg-gradient-1 text-white">
        <Modal.Title>{title}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {!leafletLoaded && (
          <div className="text-center text-muted small mb-2">Loading map...</div>
        )}
        <div
          ref={mapContainerRef}
          style={{
            height: "420px",
            width: "100%",
            borderRadius: "12px",
            overflow: "hidden",
            boxShadow: "0 6px 18px rgba(0,0,0,0.1)",
          }}
          className="mb-3"
        />
        <Row className="gy-2">
          <Col md={6}>
            <InputGroup>
              <InputGroup.Text>Lat</InputGroup.Text>
              <Form.Control
                type="number"
                step="0.0001"
                min={-90}
                max={90}
                value={Number.isFinite(tempLat) ? tempLat : ""}
                onChange={(e) => setTempLat(Number(e.target.value))}
              />
            </InputGroup>
          </Col>
          <Col md={6}>
            <InputGroup>
              <InputGroup.Text>Lng</InputGroup.Text>
              <Form.Control
                type="number"
                step="0.0001"
                min={-180}
                max={180}
                value={Number.isFinite(tempLng) ? tempLng : ""}
                onChange={(e) => setTempLng(Number(e.target.value))}
              />
            </InputGroup>
          </Col>
        </Row>
      </Modal.Body>
      <Modal.Footer className="d-flex justify-content-between">
        <Button variant="outline-primary" onClick={useDeviceGPS}>
          Use My GPS
        </Button>
        <div className="d-flex gap-2">
          <Button variant="secondary" onClick={onHide}>
            Cancel
          </Button>
          <Button
            variant="primary"
            onClick={() => {
              if (!Number.isFinite(tempLat) || !Number.isFinite(tempLng)) return;
              onApply({ lat: Number(tempLat), lng: Number(tempLng) });
              onHide();
            }}
          >
            Apply Coordinates
          </Button>
        </div>
      </Modal.Footer>
    </Modal>
  );
};

const SectionTitle = ({ children }) => (
  <div className="d-flex align-items-center mb-2">
    <h5 className="mb-0 me-2">{children}</h5>
    <div className="flex-grow-1 hr-fade" />
  </div>
);

const FileHints = ({ text }) => (
  <div className="text-muted small fst-italic mt-1">{text}</div>
);

const RegisterForm = () => {
  const [projectType, setProjectType] = useState("Local");
  const [submitting, setSubmitting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [errorSummary, setErrorSummary] = useState("");
  const [autosaveStamp, setAutosaveStamp] = useState(null);
  const [showMapFor, setShowMapFor] = useState(null); // 'local' | 'org' | null

  // Local form
  const [localData, setLocalData] = useState({
    projectTitle: "",
    ownerName: "",
    ownerPhone: "",
    ownerEmail: "",
    ecosystemType: "Mangrove",
    shortDescription: "",
    country: "",
    placeName: "",
    lat: "",
    lng: "",
    areaHa: "",
    approxPlants: "",
    startDate: "",
    photos: [],
    onsetImage: null,
    supportingDocs: [],
    hasPermit: false,
    permitDoc: null,
    gpsAccuracy: "",
    consent: false,
    intendsCarbonCredits: false,
  });
  const [localErrors, setLocalErrors] = useState({});

  // Organization form
  const [orgData, setOrgData] = useState({
    projectTitle: "",
    projectExternalId: "",
    organizationType: "",
    organizationName: "",
    orgRegistrationNumber: "",
    orgContactName: "",
    orgContactEmail: "",
    orgContactPhone: "",
    orgAddress: "",
    ownerWallet: "",
    startDate: "",
    baseDate: "",
    ongoing: true,
    endDate: "",
    placeName: "",
    state: "",
    district: "",
    country: "",
    lat: "",
    lng: "",
    areaHa: "",
    geoBoundaryFile: null,
    mapReference: "",
    ecosystemType: "Mangrove",
    habitatType: "",
    methodology: "",
    estimatedSequestrationTCO2: "",
    requestedCredits: "",
    speciesList: [
      {
        speciesName: "",
        countPlanted: "",
        plantingDensity: "",
        expectedSurvivalPercent: "",
        ageClass: "",
      },
    ],
    plantTypes: { mangroves: false, seagrasses: false, tidalMarshes: false },
    numMangroves: "",
    numSeagrasses: "",
    numTidalMarshes: "",
    plantingRegime: "",
    density: "",
    monitoringPlan: "",
    sampleProtocol: "",
    soilSamples: [],
    vegSamples: [],
    plantingEvents: [],
    photos: [],
    satelliteImages: [],
    labReports: [],
    researchDocs: [],
    permitDocs: [],
    fundingDocs: [],
    baselineCarbon: "",
    calculationParams: "",
    partners: "",
    rolesJson: "",
    verifierContact: "",
    fundingSource: "",
    benefitSharing: "",
    tags: "",
    isConfidential: false,
    consent: false,
    gpsAccuracy: "",
    regulatoryRequired: "",
    licenseNumber: "",
    licenseDoc: null,
    landOwnershipProof: null,
    communityConsentDoc: null,
    soilBulkDensity: "",
    soilOrganicCarbonPercent: "",
    waterSalinityPsu: "",
    waterPh: "",
  });
  const [orgErrors, setOrgErrors] = useState({});

  // Load drafts
  useEffect(() => {
    try {
      const t = localStorage.getItem("registerForm.type");
      if (t) setProjectType(t);
      const l = localStorage.getItem("registerForm.local");
      if (l) setLocalData(JSON.parse(l));
      const o = localStorage.getItem("registerForm.org");
      if (o) setOrgData(JSON.parse(o));
    } catch {}
  }, []);

  const stamp = () => setAutosaveStamp(new Date().toISOString());

  // Autosave
  useDebouncedEffect(() => {
    try {
      localStorage.setItem("registerForm.type", projectType);
      stamp();
    } catch {}
    return () => {};
  }, [projectType]);

  useDebouncedEffect(() => {
    try {
      localStorage.setItem("registerForm.local", JSON.stringify(localData));
      stamp();
    } catch {}
    return () => {};
  }, [localData]);

  useDebouncedEffect(() => {
    try {
      localStorage.setItem("registerForm.org", JSON.stringify(orgData));
      stamp();
    } catch {}
    return () => {};
  }, [orgData]);

  // Generic change handler
  const handleChange = (e, isOrg = false) => {
    const { name, type, checked, value, files, multiple } = e.target;
    const setter = isOrg ? setOrgData : setLocalData;
    setter((prev) => {
      const copy = { ...prev };
      if (type === "checkbox") {
        copy[name] = checked;
      } else if (type === "file") {
        copy[name] = multiple ? (files ? Array.from(files) : []) : files?.[0] || null;
      } else {
        copy[name] = value;
      }
      return copy;
    });
  };

  // Helpers
  const isValidLat = (v) => {
    if (v === "" || v === null || v === undefined) return false;
    const n = Number(v);
    return !isNaN(n) && n >= -90 && n <= 90;
  };
  const isValidLng = (v) => {
    if (v === "" || v === null || v === undefined) return false;
    const n = Number(v);
    return !isNaN(n) && n >= -180 && n <= 180;
  };
  const within = (val, min, max) => {
    const n = Number(val);
    return !isNaN(n) && n >= min && n <= max;
  };
  const positive = (val) => {
    const n = Number(val);
    return !isNaN(n) && n > 0;
  };

  // Plant types
  const togglePlantType = (key) => {
    setOrgData((prev) => ({
      ...prev,
      plantTypes: { ...prev.plantTypes, [key]: !prev.plantTypes[key] },
    }));
  };
  const selectedPlantTypeCount = useMemo(() => {
    const p = orgData.plantTypes || {};
    return (p.mangroves ? 1 : 0) + (p.seagrasses ? 1 : 0) + (p.tidalMarshes ? 1 : 0);
  }, [orgData.plantTypes]);

  // GPS helpers
  const setLocalField = (name, value) =>
    setLocalData((prev) => ({ ...prev, [name]: value }));
  const setOrgField = (name, value) =>
    setOrgData((prev) => ({ ...prev, [name]: value }));

  const useDeviceGPSLocal = () => {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        setLocalField("lat", Number(pos.coords.latitude).toFixed(6));
        setLocalField("lng", Number(pos.coords.longitude).toFixed(6));
        setLocalField("gpsAccuracy", Number(pos.coords.accuracy).toFixed(1));
      },
      () => {},
      { enableHighAccuracy: true, timeout: 8000 }
    );
  };
  const useDeviceGPSOrg = () => {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        setOrgField("lat", Number(pos.coords.latitude).toFixed(6));
        setOrgField("lng", Number(pos.coords.longitude).toFixed(6));
        setOrgField("gpsAccuracy", Number(pos.coords.accuracy).toFixed(1));
      },
      () => {},
      { enableHighAccuracy: true, timeout: 8000 }
    );
  };

  // Validation - Local
  const validateLocal = () => {
    const errs = {};
    const d = localData;

    if (!d.projectTitle || d.projectTitle.trim().length < 5)
      errs.projectTitle = "5â200 characters required.";
    if (!d.ownerName || d.ownerName.trim().length < 3)
      errs.ownerName = "3â120 characters required.";
    if (!d.ownerPhone || !PHONE_REGEX.test(d.ownerPhone))
      errs.ownerPhone = "Enter valid phone (7â20 chars, country code allowed).";
    if (!d.ownerEmail || !EMAIL_REGEX.test(d.ownerEmail))
      errs.ownerEmail = "Enter valid email address.";
    if (!d.ecosystemType) errs.ecosystemType = "Please select an ecosystem.";
    if (!d.country) errs.country = "Country is required.";
    if (!d.placeName || d.placeName.trim().length < 3)
      errs.placeName = "3â200 characters required.";
    if (!isValidLat(d.lat)) errs.lat = "Latitude must be -90 to 90.";
    if (!isValidLng(d.lng)) errs.lng = "Longitude must be -180 to 180.";
    if (!positive(d.areaHa)) errs.areaHa = "Area (ha) must be > 0.";

    if (!Array.isArray(d.photos) || d.photos.length < 2) {
      errs.photos = "Upload at least 2 photos (JPG/PNG, <= 10 MB each).";
    } else {
      for (const f of d.photos) {
        if (!["image/jpeg", "image/png"].includes(f.type)) {
          errs.photos = "Photos must be JPG or PNG.";
          break;
        }
        if (f.size > MAX_LOCAL_PHOTO_MB * 1024 * 1024) {
          errs.photos = `Each photo must be <= ${MAX_LOCAL_PHOTO_MB} MB.`;
          break;
        }
      }
    }

    if (!d.consent) errs.consent = "You must confirm to submit this form.";
    return errs;
  };

  // Validation - Organization
  const validateOrg = () => {
    const errs = {};
    const d = orgData;

    if (!d.projectTitle || d.projectTitle.trim().length < 5)
      errs.projectTitle = "5â250 characters required.";
    if (!d.organizationType) errs.organizationType = "Select organization type.";
    if (!d.organizationName) errs.organizationName = "Organization Name is required.";
    if (!d.orgContactName) errs.orgContactName = "Contact Person is required.";
    if (!d.orgContactEmail || !EMAIL_REGEX.test(d.orgContactEmail))
      errs.orgContactEmail = "Valid email is required.";
    if (d.orgContactPhone && !PHONE_REGEX.test(d.orgContactPhone))
      errs.orgContactPhone = "Enter a valid phone number.";
    if (d.ownerWallet && !WALLET_REGEX.test(d.ownerWallet))
      errs.ownerWallet = "Invalid Ethereum address (0x + 40 hex).";

    if (!d.startDate) errs.startDate = "Start Date is required.";
    if (!d.ongoing && !d.endDate) errs.endDate = "Provide End Date or mark Ongoing.";

    if (!d.placeName) errs.placeName = "Place Name is required.";
    if (!d.country) errs.country = "Country is required.";
    if (!isValidLat(d.lat)) errs.lat = "Latitude must be -90 to 90.";
    if (!isValidLng(d.lng)) errs.lng = "Longitude must be -180 to 180.";
    if (!positive(d.areaHa)) errs.areaHa = "Area (ha) must be > 0.";

    if (!d.ecosystemType) errs.ecosystemType = "Ecosystem Type is required.";
    if (!d.methodology || d.methodology.trim() === "")
      errs.methodology = "Methodology/Standard is required.";
    if (!d.monitoringPlan || d.monitoringPlan.trim() === "")
      errs.monitoringPlan = "Monitoring Plan is required.";

    if (
      !Array.isArray(d.speciesList) ||
      d.speciesList.length === 0 ||
      !d.speciesList[0].speciesName
    ) {
      errs.speciesList = "Add at least one species with a name.";
    } else {
      d.speciesList.forEach((row, idx) => {
        if (row.countPlanted && !positive(row.countPlanted)) {
          errs[`speciesList_${idx}_countPlanted`] = "Count must be positive.";
        }
        if (
          row.expectedSurvivalPercent &&
          !within(row.expectedSurvivalPercent, 0, 100)
        ) {
          errs[`speciesList_${idx}_expectedSurvivalPercent`] = "Survival % must be 0â100.";
        }
      });
    }

    const ptCount =
      (d.plantTypes?.mangroves ? 1 : 0) +
      (d.plantTypes?.seagrasses ? 1 : 0) +
      (d.plantTypes?.tidalMarshes ? 1 : 0);

    if (ptCount === 0) {
      errs.plantTypes =
        "Select at least one plant type (Mangroves/Seagrasses/Tidal Marshes).";
    }
    if (ptCount > 2) {
      if (d.plantTypes.mangroves && !positive(d.numMangroves))
        errs.numMangroves = "Enter number of Mangrove plants (> 0).";
      if (d.plantTypes.seagrasses && !positive(d.numSeagrasses))
        errs.numSeagrasses = "Enter number of Seagrass plants (> 0).";
      if (d.plantTypes.tidalMarshes && !positive(d.numTidalMarshes))
        errs.numTidalMarshes = "Enter number of Tidal Marsh plants (> 0).";
      if (!Array.isArray(d.researchDocs) || d.researchDocs.length === 0) {
        errs.researchDocs =
          "Upload at least one Research Report when selecting more than two plant types.";
      }
    }

    const numPhotos = Array.isArray(d.photos) ? d.photos.length : 0;
    const numSat = Array.isArray(d.satelliteImages) ? d.satelliteImages.length : 0;
    const photosOk = numPhotos >= 5 || (numSat >= 1 && numPhotos >= 3);
    if (!photosOk) {
      errs.photos = "Minimum evidence: 5+ photos OR 1 satellite image + 3 photos.";
    }

    if (Array.isArray(d.photos)) {
      for (const f of d.photos) {
        if (!["image/jpeg", "image/png"].includes(f.type)) {
          errs.photos = "Photos must be JPG or PNG.";
          break;
        }
        if (f.size > MAX_ORG_PHOTO_MB * 1024 * 1024) {
          errs.photos = `Each photo must be <= ${MAX_ORG_PHOTO_MB} MB.`;
          break;
        }
      }
    }
    if (Array.isArray(d.satelliteImages)) {
      for (const f of d.satelliteImages) {
        const name = (f.name || "").toLowerCase();
        const typeOk = ["image/tiff", "image/tif", "image/jpeg", "image/jpg", "image/png"].includes(f.type);
        const extOk =
          name.endsWith(".tif") ||
          name.endsWith(".tiff") ||
          name.endsWith(".jpg") ||
          name.endsWith(".jpeg") ||
          name.endsWith(".png");
        if (!typeOk && !extOk) {
          errs.satelliteImages = "Satellite images must be .tif/.tiff/.jpg/.jpeg/.png";
          break;
        }
        if (f.size > MAX_DOC_MB * 1024 * 1024) {
          errs.satelliteImages = `Each satellite file must be <= ${MAX_DOC_MB} MB.`;
          break;
        }
      }
    }

    if (d.geoBoundaryFile) {
      const f = d.geoBoundaryFile;
      const name = (f.name || "").toLowerCase();
      if (
        !(
          name.endsWith(".geojson") ||
          name.endsWith(".json") ||
          name.endsWith(".kml") ||
          name.endsWith(".zip")
        )
      ) {
        errs.geoBoundaryFile = "Allowed: .geojson, .json, .kml, .zip (shapefile).";
      } else if (f.size > MAX_BOUNDARY_MB * 1024 * 1024) {
        errs.geoBoundaryFile = `Boundary file <= ${MAX_BOUNDARY_MB} MB.`;
      }
    }

    if (!d.regulatoryRequired)
      errs.regulatoryRequired = "Select if permits are required in your jurisdiction.";
    if (d.regulatoryRequired === "yes") {
      if (!Array.isArray(d.permitDocs) || d.permitDocs.length === 0)
        errs.permitDocs = "Upload permit/legal documents if required by law.";
      if (!d.licenseNumber || d.licenseNumber.trim().length < 3)
        errs.licenseNumber = "License number is required.";
      if (!d.licenseDoc) errs.licenseDoc = "Upload license document.";
    }

    if (d.soilBulkDensity && !within(d.soilBulkDensity, 0.2, 2.0))
      errs.soilBulkDensity = "Soil bulk density should be 0.2â2.0 g/cmÂ³.";
    if (d.soilOrganicCarbonPercent && !within(d.soilOrganicCarbonPercent, 0, 60))
      errs.soilOrganicCarbonPercent = "SOC% should be between 0 and 60.";
    if (d.waterSalinityPsu && !within(d.waterSalinityPsu, 0, 40))
      errs.waterSalinityPsu = "Salinity should be 0â40 PSU.";
    if (d.waterPh && !within(d.waterPh, 5, 9)) errs.waterPh = "Water pH should be 5â9.";

    if (!d.consent) errs.consent = "You must confirm to submit this form.";
    return errs;
  };

  const clearDraft = () => {
    try {
      localStorage.removeItem("registerForm.local");
      localStorage.removeItem("registerForm.org");
      localStorage.removeItem("registerForm.type");
    } catch {}
  };

  const scrollToFirstError = (errs) => {
    const keys = Object.keys(errs || {});
    if (!keys.length) return;
    const id = keys[0];
    const el =
      document.querySelector(`[data-err="${id}"]`) ||
      document.querySelector(`[name="${id}"]`);
    if (el?.scrollIntoView) el.scrollIntoView({ behavior: "smooth", block: "center" });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setErrorSummary("");
    setSubmitting(true);

    if (projectType === "Local") {
      const errs = validateLocal();
      setLocalErrors(errs);
      setSubmitting(false);
      if (Object.keys(errs).length) {
        setErrorSummary("Please fix the highlighted fields below.");
        scrollToFirstError(errs);
        return;
      }
    } else {
      const errs = validateOrg();
      setOrgErrors(errs);
      setSubmitting(false);
      if (Object.keys(errs).length) {
        setErrorSummary("Please fix the highlighted fields below.");
        scrollToFirstError(errs);
        return;
      }
    }

    // Success (no backend)
    setTimeout(() => {
      setShowSuccess(true);
      clearDraft();
      setTimeout(() => {
        setShowSuccess(false);
        window.location.href = "/";
      }, 1600);
    }, 350);
  };

  // Species handlers
  const addSpeciesRow = () => {
    setOrgData((prev) => ({
      ...prev,
      speciesList: [
        ...prev.speciesList,
        {
          speciesName: "",
          countPlanted: "",
          plantingDensity: "",
          expectedSurvivalPercent: "",
          ageClass: "",
        },
      ],
    }));
  };
  const removeSpeciesRow = (i) => {
    setOrgData((prev) => {
      const s = [...prev.speciesList];
      s.splice(i, 1);
      return { ...prev, speciesList: s };
    });
  };
  const handleSpeciesChange = (index, e) => {
    const { name, value } = e.target;
    setOrgData((prev) => {
      const s = [...prev.speciesList];
      s[index][name] = value;
      return { ...prev, speciesList: s };
    });
  };

  const nowSaved = autosaveStamp
    ? new Date(autosaveStamp).toLocaleTimeString()
    : null;

  return (
    <div className="container py-4">
      <style>{`
        .bg-gradient-1 { background: linear-gradient(135deg, #4f46e5, #0ea5e9); }
        .card-neo {
          background: rgba(255,255,255,0.88);
          backdrop-filter: blur(6px);
          border: 1px solid rgba(0,0,0,0.06);
          border-radius: 16px;
          box-shadow: 0 10px 30px rgba(2,6,23,0.08);
          transition: transform .2s ease, box-shadow .2s ease;
        }
        .card-neo:hover { transform: translateY(-2px); box-shadow: 0 14px 36px rgba(2,6,23,0.12); }
        .animate-in { animation: fadeUp .5s ease both; }
        @keyframes fadeUp { from { opacity: 0; transform: translateY(8px); } to { opacity: 1; transform: translateY(0); } }
        .section {
          padding: 16px; border-radius: 12px; border: 1px dashed rgba(99,102,241,0.3);
          background: linear-gradient(0deg, rgba(99,102,241,0.06), rgba(14,165,233,0.05));
          margin-bottom: 16px;
        }
        .hr-fade { height: 1px; background: linear-gradient(90deg, rgba(0,0,0,0.1), rgba(0,0,0,0)); }
        .success-overlay {
          position: fixed; inset: 0; background: rgba(0,0,0,0.6);
          display: flex; align-items: center; justify-content: center; z-index: 9999;
        }
        .success-card {
          background: #fff; padding: 24px 28px; border-radius: 16px; text-align: center;
          animation: popIn .35s ease both;
        }
        @keyframes popIn { from { transform: scale(0.92); opacity: 0; } to { transform: scale(1); opacity: 1; } }
        .checkmark {
          width: 64px; height: 64px; border-radius: 50%; background: #10b981;
          display: inline-flex; align-items: center; justify-content: center; color: white;
          font-size: 38px; margin-bottom: 12px; box-shadow: 0 8px 20px rgba(16,185,129,0.4); animation: pulse 0.9s ease 1;
        }
        @keyframes pulse { 0% { transform: scale(0.9); } 50% { transform: scale(1.04); } 100% { transform: scale(1); } }
        .hold-tip-wrapper { position: relative; display: inline-block; }
        .hold-tip-trigger { color: #0ea5e9; margin-left: 6px; cursor: pointer; user-select: none; }
        .hold-tip-bubble {
          position: absolute; top: -8px; left: 20px; min-width: 220px; max-width: 320px;
          background: #0ea5e9; color: white; padding: 8px 10px; border-radius: 8px; font-size: 12px;
          box-shadow: 0 6px 14px rgba(14,165,233,0.35); animation: tipFade .2s ease both; z-index: 10;
        }
        @keyframes tipFade { from { opacity: 0; transform: translateY(-2px); } to { opacity: 1; transform: translateY(0); } }
        .red-note { color: #dc2626; font-size: 0.875rem; margin-top: 4px; }
      `}</style>

      <Card className="card-neo animate-in">
        <Card.Header className="bg-gradient-1 text-white">
          <div className="d-flex align-items-center justify-content-between">
            <h4 className="mb-0">Register Project</h4>
            {nowSaved && (
              <span className="small">
                Autosaved at <Badge bg="light" text="dark">{nowSaved}</Badge>
              </span>
            )}
          </div>
        </Card.Header>
        <Card.Body>
          <Form noValidate onSubmit={handleSubmit}>
            <div className="mb-3">
              <Form.Label>
                Project Type{" "}
                <HoldTip text="Choose Local for individuals/small teams. Choose Organization for full verification and carbon credit workflow." />
              </Form.Label>
              <Form.Select
                value={projectType}
                onChange={(e) => setProjectType(e.target.value)}
              >
                <option value="Local">Local (short form)</option>
                <option value="Organization">Organization (full, production-grade)</option>
                <option value="Collaboration" disabled>Collaboration (coming soon)</option>
              </Form.Select>
            </div>

            {errorSummary && (
              <Alert variant="danger" className="animate-in">{errorSummary}</Alert>
            )}

            {projectType === "Local" && (
              <>
                <div className="section animate-in">
                  <p className="mb-2">
                    <strong>Use this Local Project form</strong> when you are a small team,
                    individual, or community restoring a coastal area (mangrove, seagrass,
                    salt marsh). This form collects essential data to create a verifiable
                    project record. Drafts save automatically.
                  </p>
                  <div className="text-muted small">
                    Lightweight record: owner identity, location and size, ecosystem type,
                    minimal evidence (photos), short description. Not for immediate carbon
                    credit minting.
                  </div>
                </div>

                <SectionTitle>Project Details</SectionTitle>
                <Form.Group className="mb-3">
                  <Form.Label>
                    Project Title *
                    <HoldTip text='Short descriptive name. Example: "Ramnagar Mangrove Restoration â 2025". 5â200 characters.' />
                  </Form.Label>
                  <Form.Control
                    type="text"
                    name="projectTitle"
                    value={localData.projectTitle}
                    onChange={handleChange}
                    maxLength={200}
                    isInvalid={!!localErrors.projectTitle}
                    data-err="projectTitle"
                  />
                  {localErrors.projectTitle && (
                    <div className="red-note">{localErrors.projectTitle}</div>
                  )}
                </Form.Group>

                <SectionTitle>Owner Details</SectionTitle>
                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Owner / Primary Contact Name *
                        <HoldTip text="Individual or group lead who submits this project. 3â120 characters." />
                      </Form.Label>
                      <Form.Control
                        type="text"
                        name="ownerName"
                        value={localData.ownerName}
                        onChange={handleChange}
                        minLength={3}
                        maxLength={120}
                        isInvalid={!!localErrors.ownerName}
                        data-err="ownerName"
                      />
                      {localErrors.ownerName && (
                        <div className="red-note">{localErrors.ownerName}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Contact Phone *
                        <HoldTip text="Enter reachable number, preferably with country code. 7â20 digits." />
                      </Form.Label>
                      <Form.Control
                        type="tel"
                        name="ownerPhone"
                        value={localData.ownerPhone}
                        onChange={handleChange}
                        isInvalid={!!localErrors.ownerPhone}
                        data-err="ownerPhone"
                        placeholder="+91-XXXXXXXXXX"
                      />
                      {localErrors.ownerPhone && (
                        <div className="red-note">{localErrors.ownerPhone}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Contact Email *
                        <HoldTip text="We will send project updates here." />
                      </Form.Label>
                      <Form.Control
                        type="email"
                        name="ownerEmail"
                        value={localData.ownerEmail}
                        onChange={handleChange}
                        isInvalid={!!localErrors.ownerEmail}
                        data-err="ownerEmail"
                      />
                      {localErrors.ownerEmail && (
                        <div className="red-note">{localErrors.ownerEmail}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Ecosystem Type *
                        <HoldTip text="Choose the ecosystem that best describes the project site." />
                      </Form.Label>
                      <Form.Select
                        name="ecosystemType"
                        value={localData.ecosystemType}
                        onChange={handleChange}
                        isInvalid={!!localErrors.ecosystemType}
                        data-err="ecosystemType"
                      >
                        {ECOSYSTEM_OPTIONS.map((opt) => (
                          <option key={opt} value={opt}>
                            {opt}
                          </option>
                        ))}
                      </Form.Select>
                      {localErrors.ecosystemType && (
                        <div className="red-note">{localErrors.ecosystemType}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Short Description
                        <HoldTip text="One-paragraph summary (what you planted/restored and why). Max 500 chars." />
                      </Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={3}
                        name="shortDescription"
                        maxLength={500}
                        value={localData.shortDescription}
                        onChange={handleChange}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>Location</SectionTitle>
                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Country *
                        <HoldTip text="Select the country of the project site." />
                      </Form.Label>
                      <Form.Select
                        name="country"
                        value={localData.country}
                        onChange={handleChange}
                        isInvalid={!!localErrors.country}
                        data-err="country"
                      >
                        <option value="">Select country</option>
                        {COUNTRIES.map((c) => (
                          <option key={c} value={c}>
                            {c}
                          </option>
                        ))}
                      </Form.Select>
                      {localErrors.country && (
                        <div className="red-note">{localErrors.country}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={5}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Place Name *
                        <HoldTip text="Village or coastal landmark near the site. 3â200 characters." />
                      </Form.Label>
                      <Form.Control
                        type="text"
                        name="placeName"
                        value={localData.placeName}
                        onChange={handleChange}
                        minLength={3}
                        maxLength={200}
                        isInvalid={!!localErrors.placeName}
                        data-err="placeName"
                      />
                      {localErrors.placeName && (
                        <div className="red-note">{localErrors.placeName}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={3} className="d-flex align-items-end">
                    <div className="d-flex gap-2 mb-3">
                      <Button variant="outline-primary" onClick={useDeviceGPSLocal}>
                        Use GPS
                      </Button>
                      <Button variant="outline-secondary" onClick={() => setShowMapFor("local")}>
                        Pick on Map
                      </Button>
                    </div>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Latitude *
                        <HoldTip text="GPS latitude for verification. Range -90 to 90." />
                      </Form.Label>
                      <Form.Control
                        type="number"
                        name="lat"
                        value={localData.lat}
                        onChange={handleChange}
                        step="0.0001"
                        min={-90}
                        max={90}
                        isInvalid={!!localErrors.lat}
                        data-err="lat"
                      />
                      {localErrors.lat && <div className="red-note">{localErrors.lat}</div>}
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Longitude *
                        <HoldTip text="GPS longitude for verification. Range -180 to 180." />
                      </Form.Label>
                      <Form.Control
                        type="number"
                        name="lng"
                        value={localData.lng}
                        onChange={handleChange}
                        step="0.0001"
                        min={-180}
                        max={180}
                        isInvalid={!!localErrors.lng}
                        data-err="lng"
                      />
                      {localErrors.lng && <div className="red-note">{localErrors.lng}</div>}
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        GPS Accuracy (m) (optional)
                        <HoldTip text="If your device reports accuracy (in meters), include it to help verifiers." />
                      </Form.Label>
                      <Form.Control
                        type="number"
                        name="gpsAccuracy"
                        value={localData.gpsAccuracy}
                        onChange={handleChange}
                        step="0.1"
                        min="0"
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Area (hectares) *
                        <HoldTip text="Estimate of restored/planting area. Decimal precision e.g., 2.50 ha." />
                      </Form.Label>
                      <Form.Control
                        type="number"
                        name="areaHa"
                        value={localData.areaHa}
                        onChange={handleChange}
                        step="0.01"
                        min={0.01}
                        isInvalid={!!localErrors.areaHa}
                        data-err="areaHa"
                      />
                      {localErrors.areaHa && (
                        <div className="red-note">{localErrors.areaHa}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Approx. number of plants (optional)
                        <HoldTip text="If known, approximate total planted." />
                      </Form.Label>
                      <Form.Control
                        type="number"
                        name="approxPlants"
                        value={localData.approxPlants}
                        onChange={handleChange}
                        min={1}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Start Date (optional)
                        <HoldTip text="Date planting/restoration started." />
                      </Form.Label>
                      <Form.Control
                        type="date"
                        name="startDate"
                        value={localData.startDate}
                        onChange={handleChange}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>Evidence</SectionTitle>
                <Form.Group className="mb-3">
                  <Form.Label>
                    Photos (at least 2) *
                    <HoldTip text="Upload clear JPG/PNG images (<=10MB each). Include a wide shot and a close-up; GPS-tag helps." />
                  </Form.Label>
                  <Form.Control
                    type="file"
                    name="photos"
                    multiple
                    accept="image/jpeg,image/png"
                    onChange={handleChange}
                    isInvalid={!!localErrors.photos}
                    data-err="photos"
                  />
                  {localErrors.photos && (
                    <div className="red-note">{localErrors.photos}</div>
                  )}
                  <FileHints text="Recommended: 3â10 photos." />
                </Form.Group>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Onset Image (optional)
                        <HoldTip text="Planting day image or PDF note (optional)." />
                      </Form.Label>
                      <Form.Control
                        type="file"
                        name="onsetImage"
                        accept="image/*,application/pdf"
                        onChange={handleChange}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Supporting Documents (optional)</Form.Label>
                      <Form.Control
                        type="file"
                        name="supportingDocs"
                        accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                        multiple
                        onChange={handleChange}
                      />
                      <FileHints text="Max 20MB each." />
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>Permissions & Consent</SectionTitle>
                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Check
                        type="checkbox"
                        label="Local Permissions / Permit available"
                        name="hasPermit"
                        checked={localData.hasPermit}
                        onChange={handleChange}
                      />
                      {localData.hasPermit && (
                        <div className="mt-2">
                          <Form.Label>Upload Permit Document</Form.Label>
                          <Form.Control
                            type="file"
                            name="permitDoc"
                            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                            onChange={handleChange}
                          />
                        </div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Check
                        type="checkbox"
                        name="intendsCarbonCredits"
                        checked={localData.intendsCarbonCredits}
                        onChange={handleChange}
                        label="This project intends to pursue carbon credits later"
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Form.Group className="mb-3">
                  <Form.Check
                    type="checkbox"
                    name="consent"
                    checked={localData.consent}
                    onChange={handleChange}
                    isInvalid={!!localErrors.consent}
                    data-err="consent"
                    label="I confirm the information is true and I have the right to upload these files. *"
                  />
                  {localErrors.consent && (
                    <div className="red-note">{localErrors.consent}</div>
                  )}
                </Form.Group>
              </>
            )}

            {projectType === "Organization" && (
              <>
                <div className="section animate-in">
                  <p className="mb-2">
                    <strong>Use Organization Project Registration</strong> for NGO, company,
                    government or community projects that seek formal verification and carbon
                    credit issuance. Provide thorough evidence, GPS boundaries, monitoring plans,
                    and lab reports where available.
                  </p>
                </div>

                <SectionTitle>A. Administrative & Identification</SectionTitle>
                <Row>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Project Title *
                        <HoldTip text="Unique human-readable name. 5â250 chars." />
                      </Form.Label>
                      <Form.Control
                        type="text"
                        name="projectTitle"
                        value={orgData.projectTitle}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.projectTitle}
                        data-err="projectTitle"
                      />
                      {orgErrors.projectTitle && (
                        <div className="red-note">{orgErrors.projectTitle}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Project External ID (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="projectExternalId"
                        value={orgData.projectExternalId}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Organization Type *
                        <HoldTip text="Select the best fitting category for your organization." />
                      </Form.Label>
                      <Form.Select
                        name="organizationType"
                        value={orgData.organizationType}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.organizationType}
                        data-err="organizationType"
                      >
                        <option value="">Select type</option>
                        {ORGANIZATION_TYPES.map((t) => (
                          <option key={t} value={t}>
                            {t}
                          </option>
                        ))}
                      </Form.Select>
                      {orgErrors.organizationType && (
                        <div className="red-note">{orgErrors.organizationType}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>Organization Name *</Form.Label>
                      <Form.Control
                        type="text"
                        name="organizationName"
                        value={orgData.organizationName}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.organizationName}
                        data-err="organizationName"
                      />
                      {orgErrors.organizationName && (
                        <div className="red-note">{orgErrors.organizationName}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Registration Number (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="orgRegistrationNumber"
                        value={orgData.orgRegistrationNumber}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Contact Person *</Form.Label>
                      <Form.Control
                        type="text"
                        name="orgContactName"
                        value={orgData.orgContactName}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.orgContactName}
                        data-err="orgContactName"
                      />
                      {orgErrors.orgContactName && (
                        <div className="red-note">{orgErrors.orgContactName}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Contact Email *</Form.Label>
                      <Form.Control
                        type="email"
                        name="orgContactEmail"
                        value={orgData.orgContactEmail}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.orgContactEmail}
                        data-err="orgContactEmail"
                      />
                      {orgErrors.orgContactEmail && (
                        <div className="red-note">{orgErrors.orgContactEmail}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Contact Phone (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="orgContactPhone"
                        value={orgData.orgContactPhone}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.orgContactPhone}
                        data-err="orgContactPhone"
                      />
                      {orgErrors.orgContactPhone && (
                        <div className="red-note">{orgErrors.orgContactPhone}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>Organization Address (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="orgAddress"
                        value={orgData.orgAddress}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Project Lead Wallet (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="ownerWallet"
                        placeholder="0x..."
                        value={orgData.ownerWallet}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.ownerWallet}
                        data-err="ownerWallet"
                      />
                      {orgErrors.ownerWallet && (
                        <div className="red-note">{orgErrors.ownerWallet}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>B. Project Time & Status</SectionTitle>
                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Start Date *</Form.Label>
                      <Form.Control
                        type="date"
                        name="startDate"
                        value={orgData.startDate}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.startDate}
                        data-err="startDate"
                      />
                      {orgErrors.startDate && (
                        <div className="red-note">{orgErrors.startDate}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Base/Baseline Date (optional)</Form.Label>
                      <Form.Control
                        type="date"
                        name="baseDate"
                        value={orgData.baseDate}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={4} className="d-flex align-items-end">
                    <Form.Group className="mb-3">
                      <Form.Check
                        type="checkbox"
                        name="ongoing"
                        checked={orgData.ongoing}
                        onChange={(e) => handleChange(e, true)}
                        label="Ongoing project"
                      />
                    </Form.Group>
                  </Col>
                </Row>
                {!orgData.ongoing && (
                  <Form.Group className="mb-3">
                    <Form.Label>End Date *</Form.Label>
                    <Form.Control
                      type="date"
                      name="endDate"
                      value={orgData.endDate}
                      onChange={(e) => handleChange(e, true)}
                      isInvalid={!!orgErrors.endDate}
                      data-err="endDate"
                    />
                    {orgErrors.endDate && (
                      <div className="red-note">{orgErrors.endDate}</div>
                    )}
                  </Form.Group>
                )}

                <SectionTitle>C. Location & Spatial Data</SectionTitle>
                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Country *</Form.Label>
                      <Form.Select
                        name="country"
                        value={orgData.country}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.country}
                        data-err="country"
                      >
                        <option value="">Select country</option>
                        {COUNTRIES.map((c) => (
                          <option key={c} value={c}>
                            {c}
                          </option>
                        ))}
                      </Form.Select>
                      {orgErrors.country && (
                        <div className="red-note">{orgErrors.country}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>Place Name *</Form.Label>
                      <Form.Control
                        type="text"
                        name="placeName"
                        value={orgData.placeName}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.placeName}
                        data-err="placeName"
                      />
                      {orgErrors.placeName && (
                        <div className="red-note">{orgErrors.placeName}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Latitude *</Form.Label>
                      <Form.Control
                        type="number"
                        name="lat"
                        value={orgData.lat}
                        onChange={(e) => handleChange(e, true)}
                        step="0.0001"
                        min={-90}
                        max={90}
                        isInvalid={!!orgErrors.lat}
                        data-err="lat"
                      />
                      {orgErrors.lat && <div className="red-note">{orgErrors.lat}</div>}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Longitude *</Form.Label>
                      <Form.Control
                        type="number"
                        name="lng"
                        value={orgData.lng}
                        onChange={(e) => handleChange(e, true)}
                        step="0.0001"
                        min={-180}
                        max={180}
                        isInvalid={!!orgErrors.lng}
                        data-err="lng"
                      />
                      {orgErrors.lng && <div className="red-note">{orgErrors.lng}</div>}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>GPS Accuracy (m) (optional)</Form.Label>
                      <Form.Control
                        type="number"
                        name="gpsAccuracy"
                        value={orgData.gpsAccuracy}
                        onChange={(e) => handleChange(e, true)}
                        step="0.1"
                        min="0"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={3} className="d-flex align-items-end">
                    <div className="d-flex gap-2 mb-3">
                      <Button variant="outline-primary" onClick={useDeviceGPSOrg}>
                        Use GPS
                      </Button>
                      <Button variant="outline-secondary" onClick={() => setShowMapFor("org")}>
                        Pick on Map
                      </Button>
                    </div>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Area (ha) *</Form.Label>
                      <Form.Control
                        type="number"
                        name="areaHa"
                        value={orgData.areaHa}
                        onChange={(e) => handleChange(e, true)}
                        step="0.01"
                        min={0.01}
                        isInvalid={!!orgErrors.areaHa}
                        data-err="areaHa"
                      />
                      {orgErrors.areaHa && (
                        <div className="red-note">{orgErrors.areaHa}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Boundary File (GeoJSON/KML/ZIP)
                        <HoldTip text="Upload GeoJSON, KML, or zipped shapefile (<=20MB). If not available provide centroid + area." />
                      </Form.Label>
                      <Form.Control
                        type="file"
                        name="geoBoundaryFile"
                        accept=".geojson,.json,.kml,.zip"
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.geoBoundaryFile}
                        data-err="geoBoundaryFile"
                      />
                      {orgErrors.geoBoundaryFile && (
                        <div className="red-note">{orgErrors.geoBoundaryFile}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>D. Technical & MRV</SectionTitle>
                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Ecosystem Type *</Form.Label>
                      <Form.Select
                        name="ecosystemType"
                        value={orgData.ecosystemType}
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.ecosystemType}
                        data-err="ecosystemType"
                      >
                        {ECOSYSTEM_OPTIONS.map((opt) => (
                          <option key={opt} value={opt}>
                            {opt}
                          </option>
                        ))}
                      </Form.Select>
                      {orgErrors.ecosystemType && (
                        <div className="red-note">{orgErrors.ecosystemType}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={8}>
                    <Form.Group className="mb-3">
                      <Form.Label>Habitat Sub-type (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="habitatType"
                        value={orgData.habitatType}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>
                <Form.Group className="mb-3">
                  <Form.Label>
                    Methodology / Standard *
                    <HoldTip text="E.g., IPCC Tier 1/2, Verra VM0033 variant, or custom. Describe references and approach briefly." />
                  </Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="methodology"
                    value={orgData.methodology}
                    onChange={(e) => handleChange(e, true)}
                    isInvalid={!!orgErrors.methodology}
                    data-err="methodology"
                  />
                  {orgErrors.methodology && (
                    <div className="red-note">{orgErrors.methodology}</div>
                  )}
                </Form.Group>

                <Row>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Estimated Sequestration (tCOâ) (opt)</Form.Label>
                      <Form.Control
                        type="number"
                        name="estimatedSequestrationTCO2"
                        value={orgData.estimatedSequestrationTCO2}
                        onChange={(e) => handleChange(e, true)}
                        min={0}
                        step="0.01"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Requested Credits (opt)</Form.Label>
                      <Form.Control
                        type="number"
                        name="requestedCredits"
                        value={orgData.requestedCredits}
                        onChange={(e) => handleChange(e, true)}
                        min={0}
                        step="1"
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>E. Planting & Biological Data</SectionTitle>
                <div className="mb-2">
                  <div className="mb-1">
                    Select Plant Types (checkbox, multi-select){" "}
                    <HoldTip text="Choose plant categories. If you select more than two, you must provide counts for each and upload a research report." />
                  </div>
                  <div className="d-flex flex-wrap gap-3">
                    <Form.Check
                      type="checkbox"
                      label="Mangroves"
                      checked={orgData.plantTypes.mangroves}
                      onChange={() => togglePlantType("mangroves")}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Seagrasses"
                      checked={orgData.plantTypes.seagrasses}
                      onChange={() => togglePlantType("seagrasses")}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Tidal Marshes"
                      checked={orgData.plantTypes.tidalMarshes}
                      onChange={() => togglePlantType("tidalMarshes")}
                    />
                  </div>
                  {orgErrors.plantTypes && (
                    <div className="red-note" data-err="plantTypes">
                      {orgErrors.plantTypes}
                    </div>
                  )}
                </div>

                {selectedPlantTypeCount > 2 && (
                  <Row className="mb-2">
                    {orgData.plantTypes.mangroves && (
                      <Col md={4}>
                        <Form.Group className="mb-2">
                          <Form.Label>Number of plants (Mangroves) *</Form.Label>
                          <Form.Control
                            type="number"
                            name="numMangroves"
                            value={orgData.numMangroves}
                            onChange={(e) => handleChange(e, true)}
                            min={1}
                            isInvalid={!!orgErrors.numMangroves}
                            data-err="numMangroves"
                          />
                          {orgErrors.numMangroves && (
                            <div className="red-note">{orgErrors.numMangroves}</div>
                          )}
                        </Form.Group>
                      </Col>
                    )}
                    {orgData.plantTypes.seagrasses && (
                      <Col md={4}>
                        <Form.Group className="mb-2">
                          <Form.Label>Number of plants (Seagrasses) *</Form.Label>
                          <Form.Control
                            type="number"
                            name="numSeagrasses"
                            value={orgData.numSeagrasses}
                            onChange={(e) => handleChange(e, true)}
                            min={1}
                            isInvalid={!!orgErrors.numSeagrasses}
                            data-err="numSeagrasses"
                          />
                          {orgErrors.numSeagrasses && (
                            <div className="red-note">{orgErrors.numSeagrasses}</div>
                          )}
                        </Form.Group>
                      </Col>
                    )}
                    {orgData.plantTypes.tidalMarshes && (
                      <Col md={4}>
                        <Form.Group className="mb-2">
                          <Form.Label>Number of plants (Tidal Marshes) *</Form.Label>
                          <Form.Control
                            type="number"
                            name="numTidalMarshes"
                            value={orgData.numTidalMarshes}
                            onChange={(e) => handleChange(e, true)}
                            min={1}
                            isInvalid={!!orgErrors.numTidalMarshes}
                            data-err="numTidalMarshes"
                          />
                          {orgErrors.numTidalMarshes && (
                            <div className="red-note">{orgErrors.numTidalMarshes}</div>
                          )}
                        </Form.Group>
                      </Col>
                    )}
                  </Row>
                )}

                <div className="mb-2">
                  <div className="mb-1">Species List (at least one row)</div>
                  {orgData.speciesList.map((s, idx) => (
                    <Row key={idx} className="mb-2 align-items-end">
                      <Col md={3}>
                        <Form.Control
                          placeholder="Species name"
                          name="speciesName"
                          value={s.speciesName}
                          onChange={(e) => handleSpeciesChange(idx, e)}
                          isInvalid={!!orgErrors.speciesList && idx === 0 && !s.speciesName}
                          data-err="speciesList"
                        />
                      </Col>
                      <Col md={2}>
                        <Form.Control
                          placeholder="Count planted"
                          type="number"
                          name="countPlanted"
                          value={s.countPlanted}
                          onChange={(e) => handleSpeciesChange(idx, e)}
                          min={0}
                          isInvalid={!!orgErrors[`speciesList_${idx}_countPlanted`]}
                          data-err={`speciesList_${idx}_countPlanted`}
                        />
                      </Col>
                      <Col md={2}>
                        <Form.Control
                          placeholder="Density (per ha)"
                          name="plantingDensity"
                          value={s.plantingDensity}
                          onChange={(e) => handleSpeciesChange(idx, e)}
                        />
                      </Col>
                      <Col md={2}>
                        <Form.Control
                          placeholder="Survival %"
                          name="expectedSurvivalPercent"
                          type="number"
                          value={s.expectedSurvivalPercent}
                          onChange={(e) => handleSpeciesChange(idx, e)}
                          min={0}
                          max={100}
                          isInvalid={
                            !!orgErrors[`speciesList_${idx}_expectedSurvivalPercent`]
                          }
                          data-err={`speciesList_${idx}_expectedSurvivalPercent`}
                        />
                      </Col>
                      <Col md={2}>
                        <Form.Control
                          placeholder="Age class"
                          name="ageClass"
                          value={s.ageClass}
                          onChange={(e) => handleSpeciesChange(idx, e)}
                        />
                      </Col>
                      <Col md={1} className="text-end">
                        {idx === 0 ? (
                          <Button variant="success" size="sm" onClick={addSpeciesRow}>
                            +
                          </Button>
                        ) : (
                          <Button
                            variant="danger"
                            size="sm"
                            onClick={() => removeSpeciesRow(idx)}
                          >
                            -
                          </Button>
                        )}
                      </Col>
                    </Row>
                  ))}
                  {orgErrors.speciesList && (
                    <div className="red-note">{orgErrors.speciesList}</div>
                  )}
                </div>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Planting Regime (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="plantingRegime"
                        value={orgData.plantingRegime}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Initial Densities (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="density"
                        value={orgData.density}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>F. Monitoring & Sampling</SectionTitle>
                <Form.Group className="mb-3">
                  <Form.Label>Monitoring Plan *</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="monitoringPlan"
                    value={orgData.monitoringPlan}
                    onChange={(e) => handleChange(e, true)}
                    isInvalid={!!orgErrors.monitoringPlan}
                    data-err="monitoringPlan"
                  />
                  {orgErrors.monitoringPlan && (
                    <div className="red-note">{orgErrors.monitoringPlan}</div>
                  )}
                </Form.Group>

                <Row>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Soil Bulk Density (g/cmÂ³) (opt)
                        <HoldTip text="Typical range 0.2â2.0 g/cmÂ³." />
                      </Form.Label>
                      <Form.Control
                        type="number"
                        name="soilBulkDensity"
                        value={orgData.soilBulkDensity}
                        onChange={(e) => handleChange(e, true)}
                        step="0.01"
                        min="0"
                        isInvalid={!!orgErrors.soilBulkDensity}
                        data-err="soilBulkDensity"
                      />
                      {orgErrors.soilBulkDensity && (
                        <div className="red-note">{orgErrors.soilBulkDensity}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Soil Organic Carbon (%) (opt)</Form.Label>
                      <Form.Control
                        type="number"
                        name="soilOrganicCarbonPercent"
                        value={orgData.soilOrganicCarbonPercent}
                        onChange={(e) => handleChange(e, true)}
                        step="0.1"
                        min="0"
                        isInvalid={!!orgErrors.soilOrganicCarbonPercent}
                        data-err="soilOrganicCarbonPercent"
                      />
                      {orgErrors.soilOrganicCarbonPercent && (
                        <div className="red-note">
                          {orgErrors.soilOrganicCarbonPercent}
                        </div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Water Salinity (PSU) (opt)</Form.Label>
                      <Form.Control
                        type="number"
                        name="waterSalinityPsu"
                        value={orgData.waterSalinityPsu}
                        onChange={(e) => handleChange(e, true)}
                        step="0.1"
                        min="0"
                        isInvalid={!!orgErrors.waterSalinityPsu}
                        data-err="waterSalinityPsu"
                      />
                      {orgErrors.waterSalinityPsu && (
                        <div className="red-note">{orgErrors.waterSalinityPsu}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={3}>
                    <Form.Group className="mb-3">
                      <Form.Label>Water pH (opt)</Form.Label>
                      <Form.Control
                        type="number"
                        name="waterPh"
                        value={orgData.waterPh}
                        onChange={(e) => handleChange(e, true)}
                        step="0.1"
                        min="0"
                        isInvalid={!!orgErrors.waterPh}
                        data-err="waterPh"
                      />
                      {orgErrors.waterPh && (
                        <div className="red-note">{orgErrors.waterPh}</div>
                      )}
                    </Form.Group>
                  </Col>
                </Row>

                <SectionTitle>G. Evidence Files</SectionTitle>
                <Form.Group className="mb-3">
                  <Form.Label>High-resolution Photos *</Form.Label>
                  <Form.Control
                    type="file"
                    multiple
                    accept="image/jpeg,image/png"
                    name="photos"
                    onChange={(e) => handleChange(e, true)}
                    isInvalid={!!orgErrors.photos}
                    data-err="photos"
                  />
                  {orgErrors.photos && <div className="red-note">{orgErrors.photos}</div>}
                  <FileHints text={`JPG/PNG, <= ${MAX_ORG_PHOTO_MB}MB each. Provide onset + monitoring images.`} />
                </Form.Group>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Satellite Imagery (optional)</Form.Label>
                      <Form.Control
                        type="file"
                        multiple
                        accept=".tif,.tiff,.jpg,.jpeg,.png"
                        name="satelliteImages"
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.satelliteImages}
                        data-err="satelliteImages"
                      />
                      {orgErrors.satelliteImages && (
                        <div className="red-note">{orgErrors.satelliteImages}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Lab Reports (optional)</Form.Label>
                      <Form.Control
                        type="file"
                        multiple
                        accept=".pdf,.doc,.docx"
                        name="labReports"
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>
                        Research Documents {selectedPlantTypeCount > 2 ? "(required)" : "(optional)"}
                      </Form.Label>
                      <Form.Control
                        type="file"
                        multiple
                        accept=".pdf,.doc,.docx"
                        name="researchDocs"
                        onChange={(e) => handleChange(e, true)}
                        isInvalid={!!orgErrors.researchDocs}
                        data-err="researchDocs"
                      />
                      {orgErrors.researchDocs && (
                        <div className="red-note">{orgErrors.researchDocs}</div>
                      )}
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Funding / Agreements (optional)</Form.Label>
                      <Form.Control
                        type="file"
                        multiple
                        accept=".pdf,.doc,.docx"
                        name="fundingDocs"
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Form.Group className="mb-3">
                  <Form.Label>Permits & Legal Docs</Form.Label>
                  <div className="mb-2">
                    <Form.Check
                      inline
                      type="radio"
                      id="reg-yes"
                      name="regulatoryRequired"
                      label="Permits required"
                      checked={orgData.regulatoryRequired === "yes"}
                      onChange={() => setOrgField("regulatoryRequired", "yes")}
                    />
                    <Form.Check
                      inline
                      type="radio"
                      id="reg-no"
                      name="regulatoryRequired"
                      label="Not required"
                      checked={orgData.regulatoryRequired === "no"}
                      onChange={() => setOrgField("regulatoryRequired", "no")}
                    />
                    <Form.Check
                      inline
                      type="radio"
                      id="reg-unsure"
                      name="regulatoryRequired"
                      label="Unsure"
                      checked={orgData.regulatoryRequired === "unsure"}
                      onChange={() => setOrgField("regulatoryRequired", "unsure")}
                    />
                  </div>
                  {orgErrors.regulatoryRequired && (
                    <div className="red-note" data-err="regulatoryRequired">
                      {orgErrors.regulatoryRequired}
                    </div>
                  )}

                  <Row className="mt-2">
                    <Col md={4}>
                      <Form.Group className="mb-3">
                        <Form.Label>
                          License Number {orgData.regulatoryRequired === "yes" ? "*" : "(optional)"}
                        </Form.Label>
                        <Form.Control
                          type="text"
                          name="licenseNumber"
                          value={orgData.licenseNumber}
                          onChange={(e) => handleChange(e, true)}
                          isInvalid={!!orgErrors.licenseNumber}
                          data-err="licenseNumber"
                        />
                        {orgErrors.licenseNumber && (
                          <div className="red-note">{orgErrors.licenseNumber}</div>
                        )}
                      </Form.Group>
                    </Col>
                    <Col md={4}>
                      <Form.Group className="mb-3">
                        <Form.Label>
                          License Document {orgData.regulatoryRequired === "yes" ? "*" : "(optional)"}
                        </Form.Label>
                        <Form.Control
                          type="file"
                          name="licenseDoc"
                          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                          onChange={(e) => handleChange(e, true)}
                          isInvalid={!!orgErrors.licenseDoc}
                          data-err="licenseDoc"
                        />
                        {orgErrors.licenseDoc && (
                          <div className="red-note">{orgErrors.licenseDoc}</div>
                        )}
                      </Form.Group>
                    </Col>
                    <Col md={4}>
                      <Form.Group className="mb-3">
                        <Form.Label>Permits / Legal Docs</Form.Label>
                        <Form.Control
                          type="file"
                          multiple
                          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                          name="permitDocs"
                          onChange={(e) => handleChange(e, true)}
                          isInvalid={!!orgErrors.permitDocs}
                          data-err="permitDocs"
                        />
                        {orgErrors.permitDocs && (
                          <div className="red-note">{orgErrors.permitDocs}</div>
                        )}
                      </Form.Group>
                    </Col>
                  </Row>

                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Land Ownership Proof (optional)</Form.Label>
                        <Form.Control
                          type="file"
                          name="landOwnershipProof"
                          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                          onChange={(e) => handleChange(e, true)}
                        />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Community Consent Doc (optional)</Form.Label>
                        <Form.Control
                          type="file"
                          name="communityConsentDoc"
                          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                          onChange={(e) => handleChange(e, true)}
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                </Form.Group>

                <SectionTitle>HâL. Additional Fields</SectionTitle>
                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Partners (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="partners"
                        value={orgData.partners}
                        onChange={(e) => handleChange(e, true)}
                        placeholder="Comma-separated list"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Verifier Contact (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="verifierContact"
                        value={orgData.verifierContact}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Funding Source (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="fundingSource"
                        value={orgData.fundingSource}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Benefit Sharing Plan (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="benefitSharing"
                        value={orgData.benefitSharing}
                        onChange={(e) => handleChange(e, true)}
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Tags / Keywords (optional)</Form.Label>
                      <Form.Control
                        type="text"
                        name="tags"
                        value={orgData.tags}
                        onChange={(e) => handleChange(e, true)}
                        placeholder="Comma-separated"
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6} className="d-flex align-items-center">
                    <Form.Group className="mb-3">
                      <Form.Check
                        type="checkbox"
                        name="isConfidential"
                        checked={orgData.isConfidential}
                        onChange={(e) => handleChange(e, true)}
                        label="Mark certain docs confidential"
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Form.Group className="mb-3">
                  <Form.Check
                    type="checkbox"
                    name="consent"
                    checked={orgData.consent}
                    onChange={(e) => handleChange(e, true)}
                    isInvalid={!!orgErrors.consent}
                    data-err="consent"
                    label="I confirm the information is true and I have the right to upload these files and, on approval, anchor the project hash on-chain. *"
                  />
                  {orgErrors.consent && (
                    <div className="red-note">{orgErrors.consent}</div>
                  )}
                </Form.Group>
              </>
            )}

            <div className="d-flex flex-wrap gap-2 mt-3">
              <Button type="submit" variant="primary" disabled={submitting}>
                {submitting ? "Submitting..." : "Submit Project"}
              </Button>
              <Button
                type="button"
                variant="outline-secondary"
                onClick={() => (window.location.href = "/")}
              >
                Cancel
              </Button>
              <Button
                type="button"
                variant="outline-success"
                onClick={() => {
                  try {
                    localStorage.setItem("registerForm.type", projectType);
                    if (projectType === "Local") {
                      localStorage.setItem(
                        "registerForm.local",
                        JSON.stringify(localData)
                      );
                    } else {
                      localStorage.setItem(
                        "registerForm.org",
                        JSON.stringify(orgData)
                      );
                    }
                    setAutosaveStamp(new Date().toISOString());
                  } catch {}
                }}
              >
                Save Draft
              </Button>
              <Button type="button" variant="outline-danger" onClick={clearDraft}>
                Clear Draft
              </Button>
            </div>
          </Form>
        </Card.Body>
      </Card>

      {/* Map Modals */}
      <MapPickerModal
        show={showMapFor === "local"}
        onHide={() => setShowMapFor(null)}
        initialLat={
          localData.lat !== "" && !Number.isNaN(Number(localData.lat))
            ? Number(localData.lat)
            : undefined
        }
        initialLng={
          localData.lng !== "" && !Number.isNaN(Number(localData.lng))
            ? Number(localData.lng)
            : undefined
        }
        onApply={({ lat, lng }) => {
          setLocalField("lat", lat.toFixed(6));
          setLocalField("lng", lng.toFixed(6));
        }}
        title="Pick Local Project Location"
      />
      <MapPickerModal
        show={showMapFor === "org"}
        onHide={() => setShowMapFor(null)}
        initialLat={
          orgData.lat !== "" && !Number.isNaN(Number(orgData.lat))
            ? Number(orgData.lat)
            : undefined
        }
        initialLng={
          orgData.lng !== "" && !Number.isNaN(Number(orgData.lng))
            ? Number(orgData.lng)
            : undefined
        }
        onApply={({ lat, lng }) => {
          setOrgField("lat", lat.toFixed(6));
          setOrgField("lng", lng.toFixed(6));
        }}
        title="Pick Organization Project Location"
      />

      {showSuccess && (
        <div className="success-overlay">
          <div className="success-card">
            <div className="checkmark">â</div>
            <h5 className="mb-1">Thank you!</h5>
            <div className="text-muted">Your project was submitted successfully.</div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RegisterForm;




see errors, paste the first error line/message and Iâll fix it immediately.

Code is working flawlessly, Can you just make the form structure more beautiful, in design, use animations like hover, and fade up in and more unique ones. And transition . 
And show better.
Show the different sections with different animation.

And btw, modify one tiny things.
The number should be only limited to 10 fixed digits, as numbers are in contact. Know that.
And according to country.

And multiple seperate plant ecosystem should be able to selected. So organization and local can choose multiple planst.
We are assuming the project may includes multiple different species. So they should be able to choose that, make it that way.
And if there is number of plant, it Should increase depending on their choice. If they selected 2 or more.

And for draft saving you may use local storage. 

And from some limit kb to maximum of 10 mb for image.
And for uploading button, give it seperate animation and color and etc.

And design it beautifully each section distinguished able...
And add PostgreSQL connection too, and give schemes for sql saving the database directly.

And it should be linked to our homepage.
It's name is,
*HomePage.js"
The name of files.
So you add that link in register and when I give homepage code later in next response, you have to connect it too.
And the data should be saved in database.

And btw, make the light and dark more for form.
And do not changes the other parts of the code.

Just improve the design and structure with separate and that contract, and multiple ecosystem.
And also add a option to draw digital signature or send capture signature images with live capture.

Just give like like before.
Give me that earlier one, just i want it Better in design and with no error. And rewrite entire. 
Nothing else should change.


Make it final code for this registation form with absolutely no error.

And connect it with the database of PostgreSQL and also back-end logic too 
We already have server.js files, and have some code. So give that code in the same or different file but it shouldn't alter the Remaining code. And we also have a db file if you need it.

Give both database schema and backend logic, with improved registration form which is linked to "HomePage.js".

In the next response, I will give you the homepage code and tell you to make some modifications in that too, like taking this registration form which is submitted and displaying it all properly in our home page dashboard, in the card structure. And when read more. It should fetch the same as well.


And also use sha256 algorithm in registration form, so it can be used to save hash of this data and save in Blockchain. Make that system. But make it comments all, so it shouldn't work. It will be used for later. But this registration form should be secure. And our plan is for Blockchain based blue carbon registry and MRV system. So registration is this form which is supposed to be saved in Blockchain only after admin verification. 

So till then, it is saved in PostgreSQL.
So you understand the working concept. So make it all according to that.
And btw, this all should run now, as frontend.
And save in database.

While the non-working code should be comment. Which will be used later when we make back-end.
So yeah...
All data should be fetchable.

Comment all code explaining the working for understanding.
And give the final registration, schema and backend connections. Now.
We will discuss the homepage in next response.
